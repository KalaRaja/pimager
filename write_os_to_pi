#!/bin/bash

XZ_IMAGE=2022-04-04-raspios-bullseye-armhf-lite.img.xz
IMAGE=${XZ_IMAGE/.xz/}

RAW_DEVICES=()

declare -A DEVICES
declare -A DEVICES_SELECTED
declare -A DEVICES_INFO

INCREMENTAL_HOSTNAME_STATUS=ON
CURRENT_HOSTNAME_INDEX=1
HOSTNAME_PREFIX=pi
MENU_ROWS=0

sudo -v > /dev/null #ask for sudo password

printr() {
    # $1 message
    # $2 color
    # $3 type

    if [[ $3 == "menu" ]]; then
        MENU_ROWS=$((MENU_ROWS+1))
    fi

    local color=0m
    if [[ $2 == disable ]]; then
        color=90m
    fi

    echo -e "\033[$color$1\033[0m"
}

getDeviceInfo() {
    sudo fdisk -l | grep "Disk $1:"
}

getUsbDevices() {
    RAW_DEVICES=()
    if [[ -n $(ls -l /dev/disk/by-id/usb* 2>/dev/null) ]]; then
        for device in `ls -l /dev/disk/by-id/usb* | grep "/[a-z]*$" | awk '{print $11}'`; do
            local cleanDeviceString=/dev/${device:(-3)}
            RAW_DEVICES+=($cleanDeviceString)
        done
    fi
}

processUsbDevices() {
    truncateHashMaps
    local count=1
    for device in ${RAW_DEVICES[@]}; do
        local deviceInfo=$(getDeviceInfo $device)
        if [[ -n $deviceInfo ]]; then
            DEVICES[$device]=$count # hashmap: key: menu index
            DEVICES_SELECTED[$device]=0 # hashmap: key: isSelected
            DEVICES_INFO[$device]=$deviceInfo
            count=$((count+1))
        fi
    done
}

truncateHashMaps() {
    for key in ${!DEVICES[@]}; do
        DEVICES[$key]=0
        DEVICES_SELECTED[$key]=0
        DEVICES_INFO[$key]=none
    done
}

toggleIncrementalHostnameStatus() {
    if [[ $INCREMENTAL_HOSTNAME_STATUS == ON ]]; then
        INCREMENTAL_HOSTNAME_STATUS=OFF
    else
        INCREMENTAL_HOSTNAME_STATUS=ON
    fi
}

showAvailableDisksOptions() {
    if isAvailable; then
        printr "  Select Device(s)" normal menu
        for deviceKey in ${!DEVICES[@]}; do
            if (( ${DEVICES[$deviceKey]} != 0)); then
                printr "    ${DEVICES[$deviceKey]}. ${DEVICES_INFO[$deviceKey]}" normal menu
            fi
        done
    fi
}

showGenericMenu() {
    printr "  Options" normal menu
    printr "    r. Refresh device list" normal menu
    printr "    w. Write image to selected device(s)" normal menu

    if isSingleSelected; then
        printr "    i. Toggle incremental hostname $INCREMENTAL_HOSTNAME_STATUS" normal menu
    else
        printr "    i. Toggle incremental hostname $INCREMENTAL_HOSTNAME_STATUS" disable menu

    fi  

    printr "    c. Cleanup" normal menu
    printr "    q. Quit" normal menu
}

showSelectedDisks() {
     if isSelected; then
        printr "  Selected Device(s)" normal menu
        for deviceKey in ${!DEVICES_SELECTED[@]}; do
            if [[ ${DEVICES_SELECTED[$deviceKey]} == 1 ]]; then
                printr "      ${DEVICES_INFO[$deviceKey]}" normal menu
            fi
        done
    fi
}

showMenu() {
    showAvailableDisksOptions
    printr "" normal menu 
    showSelectedDisks
    printr "" normal menu 
    showGenericMenu
}

clearMenu() {
    for (( i=0 ; i<$MENU_ROWS ; i++ )); do
        tput cup i 0 && tput ed
    done
    MENU_ROWS=0
}

showLogs() {
    tput cup $((MENU_ROWS+2)) 0
    echo $MESSAGE
    printr "    $MESSAGE" normal logs
}

isSelected() {
    for deviceKey in ${!DEVICES_SELECTED[@]}; do
        if [[ ${DEVICES_SELECTED[$deviceKey]} == 1 ]]; then
            return 0
        fi
    done

    return 1
}

isAvailable() {
    for deviceKey in ${!DEVICES[@]}; do
        if [[ ${DEVICES[$deviceKey]} != 0 ]]; then
            return 0
        fi
    done

    return 1
}

isSingleSelected() {
    local count=0
    for deviceKey in ${!DEVICES_SELECTED[@]}; do
        if [[ ${DEVICES_SELECTED[$deviceKey]} == 1 ]]; then
            count=$((count+1))
        fi
    done
    
    if (( $count == 1 )); then
        return 0
    fi

    return 1
}

unpackArchive() {
    MESSAGE="Unpacking archive $XZ_IMAGE"
    if [[ ! -e $IMAGE ]]; then
        xz -dk  $XZ_IMAGE
    fi
}

writeImageTodisk() {
    MESSAGE="Writing image to ${DEVICES_INFO[$1]}"
    sudo dd if=$IMAGE of=$1 bs=16M > /dev/null
}

unmountAllDevicePartitions() {
    MESSAGE="Unmounting $1"
   for i in $(lsblk -l | grep ${1:(-3)}[1-9] | awk '{print $1}'); do
        sudo umount /dev/$i > /dev/null 2>&1
    done
}

createMountPoints() {
    MESSAGE="CReating mount points"
    if [[ ! -e boot ]]; then
        mkdir boot
    fi

    if [[ ! -e rootfs ]]; then
        mkdir rootfs
    fi
}

mountPartitions() {
    sudo mount -t vfat "$1"1 boot
    sudo mount -t ext4 "$1"2  rootfs
}

enableSSH() {
    sudo touch boot/ssh
}

addHostname() {
    sudo sed -i "s/raspberrypi/$1/" rootfs/etc/hostname
}

copyPublicKey() {
    if [[ ! -e rootfs/home/pi/.ssh ]]; then
        sudo mkdir -m 700 rootfs/home/pi/.ssh
    fi
    if [[ -e rootfs/home/pi/.ssh ]]; then
    echo writing
        sudo cp ~/.ssh/id_rsa.pub rootfs/home/pi/.ssh/authorized_keys
        sudo chown -R 1000:1000 rootfs/home/pi/.ssh
    fi

    sudo sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/' rootfs/etc/ssh/sshd_config 
}

unmountEjectDevice() {
    unmountAllDevicePartitions $1
    sudo eject $1 > /dev/null 2>&1
}

cleanup() {
    sudo rm -rf boot > /dev/null 2>&1
    sudo rm -rf rootfs > /dev/null 2>&1
    rm $IMAGE > /dev/null 2>&1
}

handleChoice() {
    if [[ -z $CHOICE ]]; then
        return 0
    elif [[ $CHOICE == 'r' ]]; then
        getUsbDevices &&
        processUsbDevices &&
        showScreen
        unset CHOICE
    elif [[ $CHOICE == 'i' ]]; then
        if isSingleSelected; then
            toggleIncrementalHostnameStatus &&
            clearMenu &&
            showMenu
            unset CHOICE
        fi
    elif [[ $CHOICE == 'c' ]]; then
        cleanup
        unset CHOICE
    elif (( $CHOICE >= 1 && $CHOICE <= ${#DEVICES[@]} )); then
        for deviceKey in ${!DEVICES[@]}; do
            if (( $CHOICE == ${DEVICES[$deviceKey]} )); then
                if (( ${DEVICES_SELECTED[$deviceKey]} == 0 )); then
                    DEVICES_SELECTED[$deviceKey]=1
                    showScreen
                fi
            fi
        done
        unset CHOICE
    elif [[  $CHOICE == 'w' ]]; then
        if [[ isSelected ]]; then
            unpackArchive
            createMountPoints
            local count=$CURRENT_HOSTNAME_INDEX
            for deviceKey in ${!DEVICES_SELECTED[@]}; do
                if [[ ${DEVICES_SELECTED[$deviceKey]} == 1 ]]; then
                    unmountAllDevicePartitions $deviceKey &&
                    writeImageTodisk $deviceKey &&
                    mountPartitions $deviceKey
                    enableSSH &&
                    addHostname $HOSTNAME_PREFIX$count &&
                    copyPublicKey
                    unmountEjectDevice $deviceKey
                    count=$((count+1))

                    if [[ $INCREMENTAL_HOSTNAME_STATUS == ON ]]; then
                        CURRENT_HOSTNAME_INDEX=$((CURRENT_HOSTNAME_INDEX+1))
                    fi
                fi
            done

            getUsbDevices &&
            processUsbDevices &&
            showScreen
        else
            echo "Nothing selected"
        fi

        unset CHOICE
    fi
}

tput reset

showScreen () {
    clearMenu &&
    showMenu
    showLogs
}

getUsbDevices &&
processUsbDevices &&
showScreen


readInput() {
    local input="r"
    read -n 1 -s -t .1 input
    if [[ ! -z $input ]]; then
        CHOICE=$input
    fi
}

while [[ $CHOICE != "q" ]]; do
    readInput
    handleChoice
    showLogs
done



#cleanup